def bubble_sort(unordered_list):
    iteration_number=len(unordered_list)-1
    for i in range(iteration_number,0,-1):
        for j in range(i):
            if unordered_list[j]>unordered_list[j+1]:
                temp=unordered_list[j]
                unordered_list[j]=unordered_list[j+1]
                unordered_list[j+1]=temp
                
def bubble_sort1(list):
    l=len(list)
    for i in range(l):
        for j in range(l-i-1):
            if list[j+1] < list[j]:
                temp=list[j]
                list[j]=list[j+1]
                list[j+1]=temp


def insertion_sort(unsorted_list):
    for index in range(1,len(unsorted_list)):
        search_index=index
        insert_value=unsorted_list[index]
        while search_index >0 and unsorted_list[search_index-1] >insert_value:
            unsorted_list[search_index]=unsorted_list[search_index-1]
            search_index -=1
            unsorted_list[search_index]=insert_value


def selection_sort(unsorted_list):
    size_of_list=len(unsorted_list)
    for i in range(size_of_list):
        small=i
        for j in range(i+1,size_of_list):
            if unsorted_list[j]<unsorted_list[small]:
                small=j
        temp=unsorted_list[i]
        unsorted_list[i]=unsorted_list[small]
        unsorted_list[small]=temp


def partition(unsorted_array,first_index,last_index):
    pivot=unsorted_array[first_index]
    pivot_index=first_index
    index_of_last_element=last_index
    less_than_pivot_index=index_of_last_element
    greater_than_pivot_index=first_index+1

    while True:
        while unsorted_array[greater_than_pivot_index] < pivot and greater_than_pivot_index< last_index:
            greater_than_pivot_index +=1
        while unsorted_array[less_than_pivot_index]> pivot and less_than_pivot_index>= first_index:
            less_than_pivot_index -=1

        if greater_than_pivot_index< less_than_pivot_index:
            temp= unsorted_array[greater_than_pivot_index]
            unsorted_array[greater_than_pivot_index]=unsorted_array[less_than_pivot_index]
            unsorted_array[less_than_pivot_index]=temp
        else:
            break
    unsorted_array[pivot_index]=unsorted_array[less_than_pivot_index]
    unsorted_array[less_than_pivot_index]=pivot
    return less_than_pivot_index

def quick_sort(unsorted_array,first,last):
    if last-first <=0:
        return
    else:
        partition_point=partition(unsorted_array,first,last)
        quick_sort(unsorted_array,first,partition_point-1)
        quick_sort(unsorted_array,partition_point+1,last)












#my_list=[4,3,2,1]
my_list=[43,3,77,89,4,20]
#bubble_sort1(my_list)
#insertion_sort(my_list)
#selection_sort(my_list)
quick_sort(my_list,0,5)
print(my_list)